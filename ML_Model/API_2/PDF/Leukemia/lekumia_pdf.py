# -*- coding: utf-8 -*-
"""lekumia_pdf

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-lXFSx-rTmFClJ2XkECCFX21dZ4r7MdT
"""

from tika import parser
import re
import joblib
import pandas as pd
import numpy as np


def predict_pdf(path):
    custom_values_list = []
    keywords = ['Haemoglobin', 'WBCs', 'Platelet', 'Basophils', 'Eosinophils']
    pdf = path
    try:
        for x in keywords:
            # for handling similar name for same thing that different from lab test to other
            dict_cbc_names = {'Haemoglobin': 'HB',
                              'WBCs': 'Leucocytic'}

            # Parsing the content of our pdf into a list of sentences
            rawText1 = parser.from_file(pdf)
            rawList1 = rawText1['content'].splitlines()
            # Iterating inside the list of sentences
            for i in rawList1:
                if re.search(x, i, re.IGNORECASE):

                    if 'MCHC' in i:
                        continue
                    # Our chosen sentence

                    # Converting our little sentence to a list and splitting it into words to finally extract the needed number.
                    list_ = list(i.split())
                    list_ = str(list_)

                    # Appling re to find the number after a certain word
                    # Result is the number we need (VERY IMPORTANT)
                    try:
                        result = re.search('\d+\.{0,1}\d*', list_).group()
                        result = float(result)
                        if 'Thousands' in list_:
                            result = result * 1000
                    except:
                        continue

                elif str(x) == 'Haemoglobin':
                    if 'MCHC' in i:
                        continue
                    if dict_cbc_names['Haemoglobin'] in i:
                        x = dict_cbc_names[str(x)]
                        list_ = list(i.split())
                        list_ = str(list_)

                        # Appling re to find the number after a certain word
                        # Result is the number we need (VERY IMPORTANT)
                        try:
                            result = re.search('\d+\.{0,1}\d*', list_).group()
                            result = float(result)
                        except:
                            continue

                elif str(x) == 'WBCs':
                    if 'MCHC' in i:
                        continue
                    if dict_cbc_names['WBCs'] in i:
                        x = dict_cbc_names[str(x)]
                        list_ = list(i.split())
                        list_ = str(list_)
                        # Appling re to find the number after a certain word
                        # Result is the number we need (VERY IMPORTANT)
                        try:
                            result = re.search('\d+\.{0,1}\d*', list_).group()
                            result = float(result)
                            if 'Thousands' in list_:
                                result = result * 1000
                        except:
                            continue

                    elif 'WBC' in i:
                        x = 'WBC'
                        list_ = list(i.split())
                        list_ = str(list_)

                        # Appling re to find the number after a certain word
                        # Result is the number we need (VERY IMPORTANT)
                        try:
                            result = re.search('\d+\.{0,1}\d*', list_).group()
                            result = float(result)
                            if 'Thousands' in list_:
                                result = result * 1000
                        except:
                            continue

            custom_values_list.append(result)

        model_acute_l = joblib.load(
            'ML_Model/API_2/PDF/Leukemia/Model/RandomForestModel(AcuteL-m,f).h5')
        model_cml = joblib.load(
            'ML_Model/API_2/PDF/Leukemia/Model/RandomForestModel(CML-m,f).h5')
        features = list(model_acute_l.feature_names_in_) + \
            list(model_cml.feature_names_in_)
        features.pop(3)  # Delete Duplicated Gender_Male from Feature List
        features.pop(3)  # Delete Duplicated Hemoglobin from Feature List
        features.pop(3)  # Delete Duplicated Platelets from Feature List
        custom_data = pd.DataFrame(data=np.array(
            [custom_values_list]), columns=features[:-1])
        custom_data['Gender_Male'] = np.random.choice([1, 0])
        pred_acute_l = model_acute_l.predict(
            custom_data[list(model_acute_l.feature_names_in_)])[0]
        pred_cml = model_cml.predict(
            custom_data[list(model_cml.feature_names_in_)])[0]

        if pred_cml == pred_acute_l:
            # As predication of two models is same
            # Two models have predicted Good as Label
            output = 'Good'
        elif pred_cml == 'CML' and pred_acute_l == 'Acute L':
            # As predication of two models is different
            # One model has predicted CML as Label
            # Other model has  predicted Acute L as Label
            output = 'Acute  L or CML'
        elif pred_cml == 'CML' and pred_acute_l == 'Good':
            # As predication of two models is different
            # One model has predicted CML as Label
            # Other model has  predicted Good as Label
            output = pred_cml
        elif pred_cml == 'Good' and pred_acute_l == 'Acute L':
            # As predication of two models is different
            # One model has predicted Good as Label
            # Other model has  predicted Acute L as Label
            output = 'Acute L'
        correct_predication_name = {
            'Anemia': 'Normal Anemia',
            'Good': 'Normal ',
            'Micro': 'Microcytic Anemia',
            'Macro': 'Macrocytic Anemia',
            'CML': 'Chronic Myelogenous Leukemia',
            'Acute L': 'Acute Lymphoblastic Leukemia',
            'HyperTyroid':  'Hyperthyroidism',
            'Hypothyroid': 'Hypothyroidism',
            'Other Thyroid Abnormalities':  'Other Thyroid Abnormalities',
            'Normal':  'Normal ',
            'Hyperuricosuria (Gout)': 'Hyperuricemia (Gout)',
            'Hypouricosuria ':  'Hypouricemia',
            'Jaundice':  'Jaundice',
            'Diabetic': 'Diabetes',
            'Pre Diabetic': 'Prediabetes',
            'Hypoglycemia': 'Hypoglycemia',
            'Prostatic_Cancer':  'Prostatic Cancer',
            'Rheumatiod_Arthities': 'Rheumatoid Arthritis',
            'Hypoparathyroid': 'Hypoparathyroidism',
            'Another Disease':  'Another Disease',
            'Hyperparathyroid': 'Hyperparathyroidism',
            'Acute  L or CML':  'Acute Lymphoblastic Lekumia and Chronic Myelogenous Lekumia',
            'Good':  'Normal',
            'Normal': 'Normal'}

        patient_output_disease = correct_predication_name[output]
        return patient_output_disease

    except:
        model_acute_l = joblib.load(
            'ML_Model/API_2/PDF/Leukemia/Model/RandomForestModel(AcuteL-m,f).h5')
        model_cml = joblib.load(
            'ML_Model/API_2/PDF/Leukemia/Model/RandomForestModel(CML-m,f).h5')
        features = list(model_acute_l.feature_names_in_) + \
            list(model_cml.feature_names_in_)
        features.pop(3)  # Delete Duplicated Gender_Male from Feature List
        features.pop(3)  # Delete Duplicated Hemoglobin from Feature List
        features.pop(3)  # Delete Duplicated Platelets from Feature List
        return 'Your uploaded PDF can\'t be detected \n \t Enter Manually the Following Please : ', features[:-1]
