# -*- coding: utf-8 -*-
"""anemia_pdf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/190nmlqT6Jp2V9q3tZOw0FLlDMQwSzSAP
"""

# -*- coding: utf-8 -*-
"""anemia_pdf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/190nmlqT6Jp2V9q3tZOw0FLlDMQwSzSAP
"""

# -*- coding: utf-8 -*-
"""anemia_pdf

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-lXFSx-rTmFClJ2XkECCFX21dZ4r7MdT
"""

from tika import parser
import re
import joblib
import pandas as pd
import numpy as np

def predict_pdf(path) :
    keywords = ['Haemoglobin','MCH','MCV','Gender']
    pdf = path

    #Parsing the content of our pdf into a list of sentences
    rawText1 = parser.from_file(pdf)
    rawList1 = rawText1['content'].splitlines()
    dict_cbc_names = {'Haemoglobin' : 'HB' ,
                       'WBCs' : 'Leucocytic'}
    dictionary = {}
    #Iterating inside the list of sentences
    for i in rawList1:
        for keyword in keywords :
              if re.search(keyword, i, re.IGNORECASE):
                  if 'MCHC' in i:
                      continue
                  #Our chosen sentence

                  #Converting our little sentence to a list and splitting it into words to finally extract the needed number.
                  list_ = list(i.split())
                  list_ = str(list_)

                  #Appling re to find the number after a certain word
                  #Result is the number we need (VERY IMPORTANT)
                  try :
                    result = re.search('\d+\.{0,1}\d*', list_).group()
                    result = float(result)
                    dictionary[keyword] = result
                  except :
                    continue




              elif str(keyword) == 'Haemoglobin' :

                  if dict_cbc_names['Haemoglobin'] in i :
                    keyword = dict_cbc_names[str(keyword)]
                    list_ = list(i.split())
                    list_ = str(list_)

                    #Appling re to find the number after a certain word
                    #Result is the number we need (VERY IMPORTANT)
                    try :
                      result = re.search('\d+\.{0,1}\d*', list_).group()
                      result = float(result)
                      dictionary[keyword] = result

                    except :
                      continue


              elif str(keyword) == 'WBCs' :

                  if dict_cbc_names['WBCs'] in i :
                    keyword = dict_cbc_names[str(keyword)]
                    list_ = list(i.split())
                    list_ = str(list_)

                    #Appling re to find the number after a certain word
                    #Result is the number we need (VERY IMPORTANT)
                    try :
                      result = re.search('\d+\.{0,1}\d*', list_).group()
                      result = float(result)
                      dictionary[keyword] = result
                    except :
                      continue

              elif re.search('Male', i,re.IGNORECASE):
                        if i.startswith('M') :
                               dictionary['Gender'] = 1
                               break

                        elif i.startswith('F') :
                                dictionary['Gender'] = 0
                                break
                        elif ':' in i :
                            result = list(i.split(':'))[1].strip()
                            if result.startswith('M') :
                               dictionary['Gender'] = 1
                               break

                            elif result.startswith('F') :
                                dictionary['Gender'] = 0
                                break

    try :
                model = joblib.load('DocTork-master/ML_Model/API_2/CV_ML_model_images/Anemia/Model/GradientBoostingModel(anemia-m,f-3features)_2.h5')
                features  = list(model.feature_names_in_)
                data_dic = {}
                data_dic[features[0]] = float(list(dictionary.items())[0][1])
                data_dic[features[1]] = dictionary['MCH']
                data_dic[features[2]] = dictionary['MCV']
                data_dic[features[3]] =  dictionary['Gender']
                custom_data = pd.DataFrame(data = [data_dic] )
                output = model.predict(custom_data)[0]
                correct_predication_name = {
                                  'Anemia' : 'Normal Anemia' ,
                                  'Good' : 'Normal ' ,
                                  'Micro' : 'Microcytic Anemia' ,
                                  'Macro'	 : 'Macrocytic Anemia' ,
                                  'CML' : 'Chronic Myelogenous Leukemia' ,
                                  'Acute L' : 'Acute Lymphoblastic Leukemia' ,
                                  'HyperTyroid' :  'Hyperthyroidism' ,
                                  'Hypothyroid' : 'Hypothyroidism' ,
                                  'Other Thyroid Abnormalities'  :  'Other Thyroid Abnormalities' ,
                                  'Normal' :  'Normal ' ,
                                  'Hyperuricosuria (Gout)' : 'Hyperuricemia (Gout)' ,
                                  'Hypouricosuria ' :  'Hypouricemia'  ,
                                  'Jaundice' :  'Jaundice' ,
                                  'Diabetic' : 'Diabetes' ,
                                  'Pre Diabetic' : 'Prediabetes' ,
                                  'Hypoglycemia' : 'Hypoglycemia' ,
                                  'Prostatic_Cancer' :  'Prostatic Cancer' ,
                                  'Rheumatiod_Arthities' : 'Rheumatoid Arthritis' ,
                                  'Hypoparathyroid' : 'Hypoparathyroidism' ,
                                  'Another Disease' :  'Another Disease' ,
                                  'Hyperparathyroid' : 'Hyperparathyroidism' ,
                                  'Acute  L or CML' :  'Acute Lymphoblastic Lekumia and Chronic Myelogenous Lekumia',
                                  'Good' :  'Normal',
                                  'Normal'  : 'Normal' 		}
                patient_output_disease = correct_predication_name[output]
                return patient_output_disease

    except :

                model = joblib.load('DocTork-master/ML_Model/API_2/CV_ML_model_images/Anemia/Model/GradientBoostingModel(anemia-m,f-3features)_2.h5')
                features  = list(model.feature_names_in_)
                return 'Your uploaded PDF can\'t be detected \n \t Enter Manually the Following Please : ',features[:-1]