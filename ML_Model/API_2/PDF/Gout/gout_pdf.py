# -*- coding: utf-8 -*-
"""gout_pdf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/190nmlqT6Jp2V9q3tZOw0FLlDMQwSzSAP
"""

# -*- coding: utf-8 -*-
"""gout_pdf

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-lXFSx-rTmFClJ2XkECCFX21dZ4r7MdT
"""

from tika import parser
import re
import joblib
import pandas as pd
import numpy as np
import PyPDF2

def predict_pdf(path) :
        keywords =  ['uric acid','Gender']
        dictionary = {}
        pdf = path
        try :
          try :
            custom_values_list = []
            for x in keywords :
              # Open the PDF file in binary mode
                with open(path, 'rb') as pdf_file:
                # Create a PDF reader object
                  pdf_reader = PyPDF2.PdfReader(pdf_file)

                  # Get the first page of the PDF file
                  page = pdf_reader.pages[0]

                  # Extract the text from the page
                  text = page.extract_text()
                  for i in text.split('\n') :
                      if re.search(x, i, re.IGNORECASE):
                              list_ = list(i.split())
                              list_ = str(list_)
                              try :
                                  result = re.search('\d+\.{0,1}\d*', list_).group()
                                  result = float(result)

                              except :
                                  continue
                              custom_values_list.append(result)

                      elif re.search('Male', i,re.IGNORECASE):
                                if i.startswith('M') :
                                        dictionary['Gender'] = 1
                                        break
                                elif i.startswith('F') :
                                        dictionary['Gender'] = 0

            model = joblib.load('DocTork-master/ML_Model/API_2/PDF/Gout/Model/EnsembleModel(DT-LR-SVM)(Gout_Diseases(Gout-Hypouricosuiria-Normal)).h5')
            custom_data = pd.DataFrame(data = np.array([custom_values_list]) , columns = list(model.feature_names_in_)[:-1])
            custom_data['Gender_Male'] =  dictionary['Gender']
            output = model.predict(custom_data)[0]
            correct_predication_name = {
                                      'Anemia': 'Normal Anemia',
                                      'Good': 'Normal ',
                                      'Micro': 'Microcytic Anemia',
                                      'Macro': 'Macrocytic Anemia',
                                      'CML': 'Chronic Myelogenous Leukemia',
                                      'Acute L': 'Acute Lymphoblastic Leukemia',
                                      'HyperTyroid':  'Hyperthyroidism',
                                      'Hypothyroid': 'Hypothyroidism',
                                      'Other Thyroid Abnormalities':  'Other Thyroid Abnormalities',
                                      'Normal':  'Normal ',
                                      'Hyperuricosuria (Gout)': 'Hyperuricemia (Gout)',
                                      'Hypouricosuria ':  'Hypouricemia',
                                      'Jaundice':  'Jaundice',
                                      'Diabetic': 'Diabetes',
                                      'Pre Diabetic': 'Prediabetes',
                                      'Hypoglycemia': 'Hypoglycemia',
                                      'Prostatic_Cancer':  'Prostatic Cancer',
                                      'Rheumatiod_Arthities': 'Rheumatoid Arthritis',
                                      'Hypoparathyroid': 'Hypoparathyroidism',
                                      'Another Disease':  'Another Disease',
                                      'Hyperparathyroid': 'Hyperparathyroidism',
                                      'Acute  L or CML':  'Acute Lymphoblastic Lekumia and Chronic Myelogenous Lekumia',
                                      'Good':  'Normal',
                                      'Normal': 'Normal'}

            patient_output_disease = correct_predication_name[output]
            return patient_output_disease
          except :
            custom_values_list = []
            for x in keywords :
                #ourpdf
                #Parsing the content of our pdf into a list of sentences
                rawText1 = parser.from_file(pdf)
                rawList1 = rawText1['content'].splitlines()
                #Iterating inside the list of sentences
                for i in rawList1:
                    if re.search(x, i, re.IGNORECASE):

                              #Our chosen sentence
                              #Converting our little sentence to a list and splitting it into words to finally extract the needed number.
                              list_ = list(i.split())
                              list_ = str(list_)

                              #Appling re to find the number after a certain word
                              #Result is the number we need (VERY IMPORTANT)
                              try :
                                result = re.search('\d+\.{0,1}\d*', list_).group()
                                result = float(result)

                              except :
                                continue

                              custom_values_list.append(result)

                    elif re.search('Male', i,re.IGNORECASE):
                                if i.startswith('M') :
                                        dictionary['Gender'] = 1
                                        break
                                elif i.startswith('F') :
                                        dictionary['Gender'] = 0


            model = joblib.load('DocTork-master/ML_Model/API_2/PDF/Gout/Model/EnsembleModel(DT-LR-SVM)(Gout_Diseases(Gout-Hypouricosuiria-Normal)).h5')
            custom_data = pd.DataFrame(data = np.array([custom_values_list]) , columns = list(model.feature_names_in_)[:-1])
            custom_data['Gender_Male'] = dictionary['Gender']
            output = model.predict(custom_data)[0]
            correct_predication_name = {
                                      'Anemia': 'Normal Anemia',
                                      'Good': 'Normal ',
                                      'Micro': 'Microcytic Anemia',
                                      'Macro': 'Macrocytic Anemia',
                                      'CML': 'Chronic Myelogenous Leukemia',
                                      'Acute L': 'Acute Lymphoblastic Leukemia',
                                      'HyperTyroid':  'Hyperthyroidism',
                                      'Hypothyroid': 'Hypothyroidism',
                                      'Other Thyroid Abnormalities':  'Other Thyroid Abnormalities',
                                      'Normal':  'Normal ',
                                      'Hyperuricosuria (Gout)': 'Hyperuricemia (Gout)',
                                      'Hypouricosuria ':  'Hypouricemia',
                                      'Jaundice':  'Jaundice',
                                      'Diabetic': 'Diabetes',
                                      'Pre Diabetic': 'Prediabetes',
                                      'Hypoglycemia': 'Hypoglycemia',
                                      'Prostatic_Cancer':  'Prostatic Cancer',
                                      'Rheumatiod_Arthities': 'Rheumatoid Arthritis',
                                      'Hypoparathyroid': 'Hypoparathyroidism',
                                      'Another Disease':  'Another Disease',
                                      'Hyperparathyroid': 'Hyperparathyroidism',
                                      'Acute  L or CML':  'Acute Lymphoblastic Lekumia and Chronic Myelogenous Lekumia',
                                      'Good':  'Normal',
                                      'Normal': 'Normal'}

            patient_output_disease = correct_predication_name[output]
            return patient_output_disease

        except :
            model = joblib.load('DocTork-master/ML_Model/API_2/PDF/Gout/Model/EnsembleModel(DT-LR-SVM)(Gout_Diseases(Gout-Hypouricosuiria-Normal)).h5')
            features = list(model.feature_names_in_ )
            return 'Your uploaded PDF can\'t be detected \n \t Enter Manually the Following Please : ',features[:-1]